apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-service.fullname" . }}
  labels:
    {{- include "auth-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "auth-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "auth-service.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "auth-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          env:
            - name: HTTP_PORT
              value: "{{ .Values.service.http.port }}"
            - name: GRPC_PORT
              value: "{{ .Values.service.grpc.port }}"
            - name: APP_ENV
              value: "{{ .Values.service.env }}"
            - name: DB_HOST
              value: "{{ .Values.database.host }}"
            - name: DB_PORT
              value: "{{ .Values.database.port }}"
            - name: DB_DATABASE
              value: "{{ .Values.database.name }}"
            - name: DB_USERNAME
              value: "{{ .Values.database.username }}"
            - name: DB_PASSWORD
              value: "{{ .Values.database.password }}"
            - name: DB_SCHEMA
              value: "{{ .Values.database.schema }}"
            - name: OTLP_DOMAIN
              value: "{{ .Values.otelcollector.domain }}"
            - name: JWT_SECRET
              value: "{{ .Values.jwt.secret }}"
            - name: S3_ACCESS_KEY
              value: "{{ .Values.s3.accessKey }}"
            - name: S3_SECRET_KEY
              value: "{{ .Values.s3.secretKey }}"
            - name: S3_ENDPOINT
              value: "{{ .Values.s3.endpoint }}"
            - name: S3_BUCKET_PROFILE_PICTURES
              value: "{{ .Values.s3.bucketProfilePictures }}"
            - name: PUBLIC_STATIC_SERVICE_ENDPOINT
              value: "{{ .Values.publicStaticServiceEndpoint }}"
          ports:
            - name: http
              containerPort: {{ .Values.service.http.port }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.service.grpc.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
