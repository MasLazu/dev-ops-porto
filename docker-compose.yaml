services:
  postgres-auth-service:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-auth-service_volume:/var/lib/postgresql/data

  auth-service:
    build:
      context: ./auth-service
    restart: unless-stopped
    depends_on:
      - postgres-auth-service
      - otel-collector
    environment:
      PORT: 80
      APP_ENV: local
      DB_HOST: postgres-auth-service
      DB_PORT: 5432
      DB_DATABASE: auth_service
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SCHEMA: public
      OTLP_DOMAIN: otel-collector:4317
      JWT_SECRET: yolelelele

  postgres-assignment-service:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: assignment_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    # volumes:
    #   - postgres-assignment-service_volume:/var/lib/postgresql/data

  assignment-service:
    build:
      context: ./assignment-service
    restart: unless-stopped
    depends_on:
      - postgres-assignment-service
      - otel-collector
    environment:
      PORT: 80
      APP_ENV: local
      DB_HOST: postgres-assignment-service
      DB_PORT: 5432
      DB_DATABASE: assignment_service
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SCHEMA: public
      OTLP_DOMAIN: otel-collector:4317
      JWT_SECRET: yolelelele

  postgres-mission-service:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: mission_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    # volumes:
    #   - postgres-mission-service_volume:/var/lib/postgresql/data

  mission-service:
    build:
      context: ./mission-service
    restart: unless-stopped
    depends_on:
      - postgres-mission-service
      - otel-collector
    environment:
      HTTP_PORT: 80
      GRPC_PORT: 443
      APP_ENV: local
      DB_HOST: postgres-mission-service
      DB_PORT: 5432
      DB_DATABASE: mission_service
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SCHEMA: public
      OTLP_DOMAIN: otel-collector:4317
      JWT_SECRET: yolelelele

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./config/otel-collector.yaml:/etc/otel/otel-collector.yaml
    command: ["--config=/etc/otel/otel-collector.yaml"]
    # ports:
    #   - 8080:8181
    depends_on:
      - cadvisor
  
  # jaeger:
  #   image: jaegertracing/all-in-one:1.6.0
  #   container_name: jaeger
  #   environment:
  #     COLLECTOR_ZIPKIN_HTTP_PORT: 9411
  #   restart: unless-stopped
  #   ports:
  #     - "16686:16686"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - tempo

  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-storage:/var/tempo

  tempo:
    image: *tempoImage
    container_name: tempo
    volumes:
      - tempo-storage:/var/lib/tempo
      - ./config/tempo.yaml:/etc/tempo/tempo.yaml
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    environment:
      - LOG_LEVEL=info
    depends_on:
      - init

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  loki:
    restart: unless-stopped
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  cadvisor:
    restart: unless-stopped
    image: google/cadvisor:latest
    command:
      - --docker_only
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"

  kong:
    image: kong:latest
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_PORTAL: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/kong.yaml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_TRACING_INSTRUMENTATIONS: "all"
      KONG_PLUGINS: "opentelemetry"
      KONG_TRACING: "on"
      KONG_TRACING_SAMPLING_RATE: "1.0"
    volumes:
      - ./config/kong.yaml:/kong/kong.yaml
    ports:
      - 8000:8000

volumes:
  postgres-auth-service_volume:
  # postgres-assignment-service_volume:
  # postgres-mission-service_volume:
  grafana-storage:
  tempo-storage:
