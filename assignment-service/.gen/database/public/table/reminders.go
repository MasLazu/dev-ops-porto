//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reminders = newRemindersTable("public", "reminders", "")

type remindersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	AssignmentID postgres.ColumnInteger
	Date         postgres.ColumnTimestampz
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RemindersTable struct {
	remindersTable

	EXCLUDED remindersTable
}

// AS creates new RemindersTable with assigned alias
func (a RemindersTable) AS(alias string) *RemindersTable {
	return newRemindersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RemindersTable with assigned schema name
func (a RemindersTable) FromSchema(schemaName string) *RemindersTable {
	return newRemindersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RemindersTable with assigned table prefix
func (a RemindersTable) WithPrefix(prefix string) *RemindersTable {
	return newRemindersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RemindersTable with assigned table suffix
func (a RemindersTable) WithSuffix(suffix string) *RemindersTable {
	return newRemindersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRemindersTable(schemaName, tableName, alias string) *RemindersTable {
	return &RemindersTable{
		remindersTable: newRemindersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newRemindersTableImpl("", "excluded", ""),
	}
}

func newRemindersTableImpl(schemaName, tableName, alias string) remindersTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		AssignmentIDColumn = postgres.IntegerColumn("assignment_id")
		DateColumn         = postgres.TimestampzColumn("date")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, AssignmentIDColumn, DateColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{AssignmentIDColumn, DateColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return remindersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		AssignmentID: AssignmentIDColumn,
		Date:         DateColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
